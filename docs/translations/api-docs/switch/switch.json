{
  "componentDescription": "",
  "propDescriptions": {
    "checked": "If <code>true</code>, the component is checked.",
    "checkedIcon": "The icon to display when the component is checked.",
    "classes": "Override or extend the styles applied to the component. See <a href=\"#css\">CSS API</a> below for more details.",
    "className": "Class name applied to the root element.",
    "color": "The color of the component. It supports those theme colors that make sense for this component.",
    "defaultChecked": "The default checked state. Use when the component is not controlled.",
    "disabled": "If <code>true</code>, the component is disabled.",
    "disableFocusRipple": "If <code>true</code>, the keyboard focus ripple is disabled.",
    "disableRipple": "If <code>true</code>, the ripple effect is disabled.<br>⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the <code>.Mui-focusVisible</code> class.",
    "disableTouchRipple": "If <code>true</code>, the touch ripple effect is disabled.",
    "edge": "If given, uses a negative margin to counteract the padding on one side (this is often helpful for aligning the left or right side of the icon with content above or below, without ruining the border size and shape).",
    "focusVisibleClassName": "This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It&#39;s a polyfill for the <a href=\"https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\">CSS :focus-visible selector</a>. The rationale for using this feature <a href=\"https://github.com/WICG/focus-visible/blob/master/explainer.md\">is explained here</a>. A <a href=\"https://github.com/WICG/focus-visible\">polyfill can be used</a> to apply a <code>focus-visible</code> class to other components if needed.",
    "icon": "The icon to display when the component is unchecked.",
    "id": "The id of the <code>input</code> element.",
    "inputProps": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">Attributes</a> applied to the <code>input</code> element.",
    "inputRef": "Ref associated with the <code>input</code> element.",
    "name": "Name attribute of the <code>input</code> element.",
    "onChange": "Callback fired when the state is changed.<br><br><strong>Signature:</strong><br><code>function(event: object) =&gt; void</code><br><em>event:</em> The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (string). You can pull out the new checked state by accessing <code>event.target.checked</code> (boolean).",
    "required": "If <code>true</code>, the <code>input</code> element is required.",
    "size": "The size of the component. <code>small</code> is equivalent to the dense switch styling.",
    "sx": "The system prop that allows defining system overrides as well as additional CSS styles. See the <a href=\"/system/the-sx-prop/\">`sx` page</a> for more details.",
    "TouchRippleProps": "Props applied to the <code>TouchRipple</code> element.",
    "value": "The value of the component. The DOM API casts this to a string. The browser uses &quot;on&quot; as the default value."
  },
  "classDescriptions": {
    "root": { "description": "Styles applied to the root element." },
    "edgeStart": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>edge=\"start\"</code>"
    },
    "edgeEnd": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>edge=\"end\"</code>"
    },
    "switchBase": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the internal `SwitchBase` component's `root` class"
    },
    "colorPrimary": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the internal SwitchBase component's root element",
      "conditions": "<code>color=\"primary\"</code>"
    },
    "colorSecondary": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the internal SwitchBase component's root element",
      "conditions": "<code>color=\"secondary\"</code>"
    },
    "sizeSmall": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"small\"</code>"
    },
    "sizeMedium": {
      "description": "Styles applied to {{nodeName}} if {{conditions}}.",
      "nodeName": "the root element",
      "conditions": "<code>size=\"medium\"</code>"
    },
    "checked": {
      "description": "Pseudo-class applied to {{nodeName}}.",
      "nodeName": "the internal `SwitchBase` component's `checked` class"
    },
    "disabled": {
      "description": "Pseudo-class applied to {{nodeName}}.",
      "nodeName": "the internal SwitchBase component's disabled class"
    },
    "input": {
      "description": "Styles applied to {{nodeName}}.",
      "nodeName": "the internal SwitchBase component's input element"
    },
    "thumb": {
      "description": "Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop."
    },
    "track": { "description": "Styles applied to {{nodeName}}.", "nodeName": "the track element" }
  }
}
